package ably_control

import (
	"fmt"
	"testing"
	"time"

	ably_control_go "github.com/ably/ably-control-go"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/acctest"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"
)

// Test Create and Update of an Ably app with:
// Step 1: Create w/ params (name=autogenerated, status=enabled, tls_only=true)
func TestAccAblyAppDS(t *testing.T) {
	app_name := acctest.RandStringFromCharSet(15, acctest.CharSetAlphaNum)
	resource.Test(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProviders,
		Steps: []resource.TestStep{
			// Create and Read testing of ably_app.app0
			{
				Config: testAccAblyAppConfig(&ably_control_go.App{
					Name:                   app_name,
					Status:                 "enabled",
					TLSOnly:                true,
					FcmKey:                 "a",
					ApnsCertificate:        cert,
					ApnsPrivateKey:         key,
					ApnsUseSandboxEndpoint: true,
				}),
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("ably_app.app0", "name", app_name),
					resource.TestCheckResourceAttr("ably_app.app0", "status", "enabled"),
					resource.TestCheckResourceAttr("ably_app.app0", "tls_only", "true"),
					resource.TestCheckFunc(
						func(s *terraform.State) error {
							time.Sleep(10 * time.Second)
							return nil
						},
					),
				),
			},
			// Create and Read testing of ably_app.app0
			{
				Config: testAccAblyAppDatasourceConfig("resource.ably_app.app0.id"),
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("data.ably_app.app0", "id", "resource.ably_app.app0.id"),
				),
			},
		},
	})
}

// Function with inline HCL to provision an ably_app resource
// Takes App name, status and tls_only status as function params.
func testAccAblyAppDatasourceConfig(appID string) string {
	return fmt.Sprintf(`
terraform {
	required_providers {
		ably = {
		source = "github.com/ably/ably"
		}
	}
}
	
# You can provide your Ably Token & URL inline or use environment variables ABLY_ACCOUNT_TOKEN & ABLY_URL
provider "ably" {}
	  
data "ably_app" "app0" {
	id     = %[1]q
}
`, appID)
}
