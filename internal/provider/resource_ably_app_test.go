package ably_control

import (
	"fmt"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/acctest"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"testing"
)

// Test Create and Update of an Ably app with:
// Step 1: Create w/ params (name=autogenerated, status=enabled, tls_only=true)
// Step 2: Update w/ params (name=acc-test-{autogenerated}, status=disabled, tls_only=false)
func TestAccAblyApp(t *testing.T) {
	app_name := acctest.RandStringFromCharSet(15, acctest.CharSetAlphaNum)
	update_app_name := "acc-test-" + app_name
	resource.Test(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProviders,
		Steps: []resource.TestStep{
			// Create and Read testing of ably_app.app0
			{
				Config: testAccAblyAppConfig(app_name, "enabled", "true"),
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("ably_app.app0", "name", app_name),
					resource.TestCheckResourceAttr("ably_app.app0", "status", "enabled"),
					resource.TestCheckResourceAttr("ably_app.app0", "tls_only", "true"),
				),
			},
			// Update and Read testing of ably_app.app0
			{
				Config: testAccAblyAppConfig(update_app_name, "disabled", "false"),
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("ably_app.app0", "name", update_app_name),
					resource.TestCheckResourceAttr("ably_app.app0", "status", "disabled"),
					resource.TestCheckResourceAttr("ably_app.app0", "tls_only", "false"),
				),
			},
			// Delete testing automatically occurs in TestCase
		},
	})
}

// Create App with status = disabled. This should fail and return status = enabled - Issue known and fix being worked on
// For now, the test will be commented out
// TODO: Verify fix with this test and update Doc Comment
// func TestAccAblyAppDisabledStatus(t *testing.T) {
// 	app_name := acctest.RandStringFromCharSet(5, acctest.CharSetAlphaNum)
// 	resource.Test(t, resource.TestCase{
// 		PreCheck:  func() { testAccPreCheck(t) },
// 		Providers: testAccProviders,
// 		Steps: []resource.TestStep{
// 			// Create and Read testing of ably_app.app0
// 			{
// 				Config: testAccAblyAppConfig(app_name, "disabled", "false"),
// 				Check: resource.ComposeAggregateTestCheckFunc(
// 					resource.TestCheckResourceAttr("ably_app.app0", "name", app_name),
// 					resource.TestCheckResourceAttr("ably_app.app0", "status", "disabled"),
// 					resource.TestCheckResourceAttr("ably_app.app0", "tls_only", "false"),
// 				),
// 			},
// 		},
// 	})
// }

// Function with inline HCL to provision an ably_app resource
// Takes App name, status and tls_only status as function params.
func testAccAblyAppConfig(appName string, appStatus string, tlsOnly string) string {
	return fmt.Sprintf(`
terraform {
	required_providers {
		ably = {
		source = "github.com/ably/ably"
		}
	}
}
	
# You can provide your Ably Token & URL inline or use environment variables ABLY_ACCOUNT_TOKEN & ABLY_URL
provider "ably" {}
	  
resource "ably_app" "app0" {
	name     = %[1]q
	status   = %[2]q
	tls_only = %[3]s
}
`, appName, appStatus, tlsOnly)
}
